
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.text.DecimalFormat;
import java.io.*;
import java.awt.Font;
import javax.swing.border.EmptyBorder;
import java.nio.charset.StandardCharsets;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            DroneCalculator calculator = new DroneCalculator();
            calculator.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            calculator.setVisible(true);
        });
    }
}

class DroneCalculator extends JFrame {
    private JTextField areaField, speedField, batteryField;
    private JTextField fertRate, pestRate, hormRate;
    private JTextArea resultArea;

    public DroneCalculator() {
        initializeUI();
    }

    private void initializeUI() {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        System.setProperty("file.encoding", "UTF-8");
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        Font thaiFont = null;
        String[] thaiFontNames = {
            "TH Sarabun New", "Angsana New", "Cordia New", 
            "Tahoma", "Arial Unicode MS", "Microsoft Sans Serif", 
            "Noto Sans Thai", "Waree", "Loma", "Lucida Sans Unicode"
        };
        
        for (String fontName : thaiFontNames) {
            thaiFont = new Font(fontName, Font.PLAIN, 16);
            if (!thaiFont.getFamily().equals("Dialog")) {
                System.out.println("‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå: " + fontName);
                break;
            }
        }
        
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÉ‡∏ä‡πâ Dialog ‡πÅ‡∏ó‡∏ô
        if (thaiFont == null || thaiFont.getFamily().equals("Dialog")) {
            thaiFont = new Font(Font.DIALOG, Font.PLAIN, 16);
            System.out.println("‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Dialog ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢");
        }
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Look and Feel ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        setTitle("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏î‡∏£‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏£‡∏° DJI");
        setSize(650, 750);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Panel ‡∏´‡∏•‡∏±‡∏Å
        JPanel mainPanel = new JPanel(new BorderLayout(15, 15));
        mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        mainPanel.setBackground(new Color(240, 248, 255)); // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÜ
        
        // Header Panel
        JPanel headerPanel = new JPanel();
        headerPanel.setBackground(new Color(240, 248, 255));
        JLabel titleLabel = new JLabel("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏î‡∏£‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏£‡∏°");
        titleLabel.setFont(new Font(thaiFont.getFamily(), Font.BOLD, 24));
        titleLabel.setForeground(new Color(0, 100, 0));
        headerPanel.add(titleLabel);
        
        // Input Panel
        JPanel inputPanel = new JPanel(new GridLayout(7, 2, 10, 10));
        inputPanel.setBackground(new Color(240, 248, 255));
        inputPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(0, 100, 0), 1), 
            "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"));
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏¥‡∏•‡∏î‡πå
        addField(inputPanel, "‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£ (‡πÑ‡∏£‡πà):", "10", areaField = new JTextField(), thaiFont);
        addField(inputPanel, "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏ô (‡πÑ‡∏£‡πà/‡∏ä‡∏°.):", "5", speedField = new JTextField(), thaiFont);
        addField(inputPanel, "‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà (‡∏ô‡∏≤‡∏ó‡∏µ):", "20", batteryField = new JTextField(), thaiFont);
        addField(inputPanel, "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏õ‡∏∏‡πã‡∏¢ (‡∏•‡∏¥‡∏ï‡∏£/‡πÑ‡∏£‡πà):", "2", fertRate = new JTextField(), thaiFont);
        addField(inputPanel, "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÅ‡∏°‡∏•‡∏á (‡∏•‡∏¥‡∏ï‡∏£/‡πÑ‡∏£‡πà):", "1", pestRate = new JTextField(), thaiFont);
        addField(inputPanel, "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏µ‡∏î‡∏Æ‡∏≠‡∏£‡πå‡πÇ‡∏°‡∏ô (‡∏•‡∏¥‡∏ï‡∏£/‡πÑ‡∏£‡πà):", "0.5", hormRate = new JTextField(), thaiFont);
        
        // Button Panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.setBackground(new Color(240, 248, 255));
        
        JButton calcButton = new JButton("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        calcButton.setFont(new Font(thaiFont.getFamily(), Font.BOLD, 16));
        calcButton.setForeground(Color.BLACK);
        calcButton.setBackground(new Color(46, 139, 87));
        calcButton.setFocusPainted(false);
        calcButton.setBorder(BorderFactory.createEmptyBorder(10, 30, 10, 30));
        calcButton.addActionListener(e -> calculate());
        buttonPanel.add(calcButton);
        
        // Result Area
        resultArea = new JTextArea(10, 20);
        resultArea.setEditable(false);
        resultArea.setFont(new Font(thaiFont.getFamily(), Font.PLAIN, 16));
        resultArea.setBackground(new Color(255, 255, 240));
        resultArea.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(0, 100, 0)),
            BorderFactory.createEmptyBorder(10, 10, 10, 10)));
        
        JPanel resultPanel = new JPanel(new BorderLayout());
        resultPanel.setBorder(BorderFactory.createTitledBorder(
            BorderFactory.createLineBorder(new Color(0, 100, 0), 1), 
            "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"));
        resultPanel.setBackground(new Color(240, 248, 255));
        resultPanel.add(new JScrollPane(resultArea), BorderLayout.CENTER);
        
        // Add all components to main panel
        mainPanel.add(headerPanel, BorderLayout.NORTH);
        mainPanel.add(inputPanel, BorderLayout.CENTER);
        mainPanel.add(buttonPanel, BorderLayout.SOUTH);
        
        JPanel wrapperPanel = new JPanel(new BorderLayout());
        wrapperPanel.setBackground(new Color(240, 248, 255));
        wrapperPanel.add(mainPanel, BorderLayout.NORTH);
        wrapperPanel.add(resultPanel, BorderLayout.CENTER);
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ö‡∏≤‡∏£‡πå
        JMenuBar menuBar = new JMenuBar();
        
        JMenu fileMenu = new JMenu("‡πÑ‡∏ü‡∏•‡πå");
        fileMenu.setFont(thaiFont);
        JMenuItem exitItem = new JMenuItem("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°");
        exitItem.setFont(thaiFont);
        exitItem.addActionListener(e -> System.exit(0));
        fileMenu.add(exitItem);
        
        JMenu viewMenu = new JMenu("‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á");
        viewMenu.setFont(thaiFont);
        JMenu fontSizeMenu = new JMenu("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
        fontSizeMenu.setFont(thaiFont);
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        int[] fontSizes = {14, 16, 18, 20, 22, 24};
        for (int size : fontSizes) {
            JMenuItem sizeItem = new JMenuItem(size + " ‡∏û‡∏≠‡∏¢‡∏ó‡πå");
            sizeItem.setFont(thaiFont);
            final int fontSize = size;
            sizeItem.addActionListener(e -> updateFontSize(fontSize));
            fontSizeMenu.add(sizeItem);
        }
        
        viewMenu.add(fontSizeMenu);
        
        menuBar.add(fileMenu);
        menuBar.add(viewMenu);
        setJMenuBar(menuBar);
        
        // Add to frame
        add(wrapperPanel);
    }
    
    private void addField(JPanel panel, String labelText, String defaultValue, JTextField field, Font font) {
        JLabel label = new JLabel(labelText);
        label.setFont(font);
        panel.add(label);
        
        field.setText(defaultValue);
        field.setFont(font);
        panel.add(field);
    }

    private void calculate() {
        try {
            // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            double area = Double.parseDouble(areaField.getText());
            double speed = Double.parseDouble(speedField.getText());
            double batteryTime = Double.parseDouble(batteryField.getText());
            double fertilizer = Double.parseDouble(fertRate.getText());
            double pesticide = Double.parseDouble(pestRate.getText());
            double hormone = Double.parseDouble(hormRate.getText());
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            double totalTime = area / speed;
            int batteries = (int) Math.ceil(totalTime * 60 / batteryTime);
            double fertilizerAmount = area * fertilizer;
            double pesticideAmount = area * pesticide;
            double hormoneAmount = area * hormone;
            
            DecimalFormat df = new DecimalFormat("#,##0.00");
            DecimalFormat intFormat = new DecimalFormat("#,##0");
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            StringBuilder result = new StringBuilder();
            result.append("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏î‡∏£‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Å‡∏£‡∏£‡∏° üìä\n\n");
            result.append("üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ").append(df.format(totalTime)).append(" ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n");
            result.append("üîã ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ: ").append(intFormat.format(batteries)).append(" ‡∏Å‡πâ‡∏≠‡∏ô\n\n");
            
            result.append("üì¶ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ:\n");
            result.append("  - ‡∏õ‡∏∏‡πã‡∏¢: ").append(df.format(fertilizerAmount)).append(" ‡∏•‡∏¥‡∏ï‡∏£\n");
            result.append("  - ‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡πÅ‡∏°‡∏•‡∏á: ").append(df.format(pesticideAmount)).append(" ‡∏•‡∏¥‡∏ï‡∏£\n");
            result.append("  - ‡∏Æ‡∏≠‡∏£‡πå‡πÇ‡∏°‡∏ô: ").append(df.format(hormoneAmount)).append(" ‡∏•‡∏¥‡∏ï‡∏£\n\n");
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° - ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£ (‡∏™‡∏°‡∏°‡∏ï‡∏¥)
            double batteryPrice = 2000; // ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏Å‡πâ‡∏≠‡∏ô
            double fuelCost = 50 * totalTime; // ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á * ‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏¥‡∏ô
            
            result.append("üí∞ ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:\n");
            result.append("  - ‡∏Ñ‡πà‡∏≤‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà: ").append(intFormat.format(batteries * batteryPrice)).append(" ‡∏ö‡∏≤‡∏ó\n");
            result.append("  - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á: ").append(intFormat.format(fuelCost)).append(" ‡∏ö‡∏≤‡∏ó\n");
            
            resultArea.setText(result.toString());
        } catch (NumberFormatException ex) {
            resultArea.setText("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)");
        }
    }
    
    // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    private void updateFontSize(int size) {
        Font newFont = new Font(resultArea.getFont().getFamily(), Font.PLAIN, size);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå
        Component[] components = getContentPane().getComponents();
        updateComponentsFontRecursive(components, newFont);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        resultArea.setFont(newFont);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π
        JMenuBar menuBar = getJMenuBar();
        if (menuBar != null) {
            updateMenuFontRecursive(menuBar, newFont);
        }
        
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        revalidate();
        repaint();
    }
    
    // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡∏ã‡∏µ‡∏ü
    private void updateComponentsFontRecursive(Component[] components, Font newFont) {
        for (Component comp : components) {
            comp.setFont(newFont);
            
            if (comp instanceof JLabel) {
                ((JLabel) comp).setFont(newFont);
            } else if (comp instanceof JTextField) {
                ((JTextField) comp).setFont(newFont);
            } else if (comp instanceof JTextArea) {
                ((JTextArea) comp).setFont(newFont);
            } else if (comp instanceof JButton) {
                ((JButton) comp).setFont(newFont);
            } else if (comp instanceof Container) {
                updateComponentsFontRecursive(((Container) comp).getComponents(), newFont);
            }
        }
    }
    
    // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡∏ã‡∏µ‡∏ü
    private void updateMenuFontRecursive(MenuElement element, Font newFont) {
        if (element instanceof JMenuItem) {
            ((JMenuItem) element).setFont(newFont);
        }
        
        MenuElement[] subElements = element.getSubElements();
        for (MenuElement subElement : subElements) {
            updateMenuFontRecursive(subElement, newFont);
        }
    }
}
